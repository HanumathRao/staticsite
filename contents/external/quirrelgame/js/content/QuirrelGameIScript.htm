<html><head><title>Quirrel Game I - Script</title><style type="text/css">ol{margin:0;padding:0}.c14{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c4{color:#1155cc;text-decoration:underline}.c0{height:11pt;direction:ltr}.c3{direction:ltr;margin-left:54pt}.c8{color:inherit;text-decoration:inherit}.c1{margin:5px;border:1px solid black}.c2{font-weight:bold}.c7{margin-left:36pt}.c6{direction:ltr}.c11{margin-left:18pt}.c5{font-style:italic}.c12{text-align:right}.c9{vertical-align:sub}.c13{height:18pt}.c10{line-height:1.0}.title{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:36pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}.subtitle{padding-top:18pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:24pt;font-family:"Georgia";padding-bottom:4pt}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:18pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;line-height:1.15;text-align:left;color:#000000;font-size:14pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;line-height:1.15;text-align:left;color:#666666;font-size:12pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:11pt;font-family:"Arial";padding-bottom:2pt}h5{padding-top:11pt;line-height:1.15;text-align:left;color:#666666;font-size:10pt;font-family:"Arial";font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:10pt;font-family:"Arial";padding-bottom:2pt}</style></head><body class="c14"><p class="c6 title"><a name="h.k4b9bx5ceih7"></a><span>Quirrel Game I</span></p><p class="c6 subtitle"><a name="h.rflx74b3mbr3"></a><span>Beginning Quirrel</span></p><h1 class="c6 c13"><a name="h.qdx4p4oeu4y1"></a></h1><hr style="page-break-before:always;display:none;"><h1 class="c6 c13"><a name="h.xku1v359x9bc"></a></h1><h1 class="c6 c13"><a name="h.fi4fxr9sdn02"></a></h1><p class="c6 c11"><span class="c4"><a class="c8" href="#h.3s81scs7o1nb">Level 1: Data &amp; Basic Operators</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.inqergamn8jm">Boolean Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.edk6mowpaf4u">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.joogfpaqmpwf">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.hw47khj42g7a">String Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.6b80zia188g8">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.8457jd8juuos">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.vrhe4jicmg15">Numeric Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.vwoyj4pt3k1l">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.lok7yktr794w">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.thqyycab3lsb">Array Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.gc5iqc82f7zl">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.de70dxvvt3yy">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.awcsvfz102i8">Object Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.mnazb7rn5d2e">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.tzvtbrtsdlkt">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.ij9by4z5xrmu">Null Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.2p35cjyyeo6f">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.l3e6uic70ymc">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.f27dzon25t33">Undefined Values</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.pnbufsd3zg3w">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.tupl6r8zz9g1">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.xryyrqb1na5l">Boolean Operators: Equality</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ry7aojc6jv2">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.sb88h95a9xxv">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.rvxo52heriqc">Boolean Operators: Inequality</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.cc8z75o5t1ig">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.sd0whp2pbqcf">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.fostillg416m">Boolean Operators: Comparison</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.jw5fzr2799l6">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.kxauupee5ixh">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.r1pnt98rjj1l">Boolean Operators: Disjunctions</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.wgcu6h5o5yl">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.c0ugcxgptktq">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.68u0em44g1w">Boolean Operators: Conjunctions</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.8yzrztv015pj">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.tro6nrei2wgq">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.nswn63rx1gao">Boolean Operators: Negation</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.xjrnotdnv71e">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.653w8bqm74qy">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.tk9yk4dg062s">Math Operators</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.vkv755olflbq">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.a67we6bloy2q">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.n6ewzzjs7r63">Conditional Operator</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.1rsn9ev71ugu">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.4s1plchdb8k3">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.1yza2fazz3u3">Assignment Operator</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.sgte0sq2ex5u">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.qrqh0zpac8w7">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.vyvm0sd8hiev">Array Drilldown Operator</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ccygul9b767k">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ngnsu8somk9d">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.w805unxi0w42">Object Drilldown Operator</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.h2c2aklvvat7">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ba6lpwflgzcg">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.d9h492o58kle">Object Augmentation</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.8m81ermi1j6a">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.4gzzmquomqrm">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.b7sdgwf2r7ad">Assert Operator</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.92z1dgbku309">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.oghrqa4qcnan">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.td2p8d0n6t4">Conclusion</a></span></p><p class="c6 c11"><span class="c4"><a class="c8" href="#h.1m48ebwvrs8c">Level 2: Loading &amp; Manipulating Data</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.miwqbp95p9l7">Load Function</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.j7yyrrpw1b71">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.9qdklcceabjr">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.1xyn2zolq8yl">Path Literals</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ruyuxlcyladb">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.p9obggybtlyk">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.dq6elgd46erk">Glob Patterns</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.t96i2pkujd4h">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.xlwkrivr98rn">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.cl63u8i37q7o">Bulk Processing: Object Drilldown</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.23hy2yamr2to">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.slnxnsmetpvr">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.al37nz78218w">Bulk Processing: Scalar Multiplication</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.55l4rqxd67to">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.623god8770yn">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.dirwrlp0w4g6">Relatedness</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.wgdtfxbk3ykh">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.r7tmgl7x7zsb">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.qnsbedr0m3mh">Bulk Processing: Object Manipulation</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.6tkf1pfgk3ai">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.jmucejvnqng8">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.ue82zvawumgf">Filtering: Simple</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.3lpc6zoh6lyv">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.bgyhme2pgq5z">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.mxssk1jo22rx">Filtering: Complex</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.4csh5fmmmysx">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.dn73evk7ovty">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.8yygvo5hlghi">Union</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.vupauj41y02e">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.xk9p3dgos5ey">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.rfx4crw1sd7f">Difference</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ttz545h6ioqn">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.w4p4gdxg6ajt">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.u6gjtevjdnlk">Intersection</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.q41bhmg8vs77">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.a3df3d8ja6hl">Incorrect</a></span></p><p class="c6 c11"><span class="c4"><a class="c8" href="#h.3sfzdodv7zfw">Level 3: Standard Library &amp; User-Defined Functions</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.x8r4oex8r1ug">Reductions: Count</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.yie3m9x5di1o">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.phphry81vy7x">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.qaafn0ymmghf">Reductions: Sum</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.i1n592jrnoej">Reductions: Standard Deviation</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.cisjdjn1qmjr">Modules: Introduction</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.jn5wf6nxva8f">Modules: Math</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.r32fl681y414">Modules: Time</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.wru8dn8rte18">Modules: String</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.uquu7g2ka1k3">Modules: Statistics</a></span></p><p class="c6 c7"><span class="c4"><a class="c8" href="#h.klaqq6bf0kot">User-Defined Functions</a></span></p><p class="c6 c11"><span class="c4"><a class="c8" href="#h.2iwqec8o6pjo">Level 4: Introduction to Solve</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.4avn0b9806sc">Solve: Single Histogram</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.pmyfe5wfcinn">Solve: Multiple Histogram</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.x43i5u96cgdy">Solve: Single Groups</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.jcdhvhq781hv">Solve: Multiple Groups</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.3j07zkwl0cal">Solve: Explicit Constraints</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.zek87l2qqamf">Solve: Running Totals</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.knh6e8wzcou6">Solve: Windowed Aggregates</a></span></p><p class="c6 c11"><span class="c4"><a class="c8" href="#h.oadx0knouw2l">Level 5: The Quirrel Test</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.kbg99fg1krck">Quiz 1</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.q2sub3io2qi">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.jr7v1xc43yw6">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.wobplfl3nkxd">Quiz 2</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.fnql3q67hj5o">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.40uvtp36k02c">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.bpu2hvdgsr4m">Quiz 3</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.8zxdhldjtfi">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.ny2ceu9d7ivc">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.2i4vp4yse4fn">Quiz 4</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.sfud25azd70y">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.qw2h4k4rv2t9">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.tpe095vu45mb">Quiz 5</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.35xda8qlyhl1">Correct</a></span></p><p class="c3"><span class="c4"><a class="c8" href="#h.q37uxri46j03">Incorrect</a></span></p><p class="c7 c6"><span class="c4"><a class="c8" href="#h.tj31rpsnh38z">Quiz 6</a></span></p><p class="c0"><span></span></p><h1 class="c6 c13"><a name="h.8qujw4w8d5cb"></a></h1><hr style="page-break-before:always;display:none;"><h1 class="c6 c13"><a name="h.d7b34ue1vaie"></a></h1><h1 class="c6"><a name="h.3s81scs7o1nb"></a><span>Level 1: Data &amp; Basic Operators</span></h1><h2 class="c6"><a name="h.inqergamn8jm"></a><span>Boolean Values</span></h2><p class="c6"><span>In this level, we&rsquo;re going to learn about the Quirrel data model and some basic operators you can use to manipulate data.</span></p><p class="c0"><span></span></p><p class="c6"><span>The Quirrel data model is a richer superset of </span><span class="c4"><a class="c8" href="http://json.org">JSON</a></span><span>. Any valid JSON is also valid Quirrel data, so Quirrel can work with strings, booleans, numbers, multi-dimensional arrays, nested objects, nulls, and other types of data.</span></p><p class="c0"><span></span></p><p class="c6"><span>Boolean values represent truth and falsity. There are two boolean values: </span><span class="c2">true</span><span>, and </span><span class="c2">false</span><span>. </span></p><p class="c0"><span></span></p><p class="c6"><span>Enter one of these values below and run your script to see what the output is.</span></p><h3 class="c6"><a name="h.edk6mowpaf4u"></a><span>Correct</span></h3><p class="c6"><span>Nice job! Notice that when you enter some data (such as </span><span class="c2">true</span><span>&nbsp;or </span><span class="c2">false</span><span>), Quirrel returns that data back to you. Quirrel is an expression-oriented language, and returns the value of the last line in your Quirrel script. In this case, your last value was raw data, so Quirrel returned that data to you.</span></p><h3 class="c6"><a name="h.joogfpaqmpwf"></a><span>Incorrect</span></h3><p class="c6"><span>Oops! You did not enter </span><span class="c2">true</span><span>&nbsp;or </span><span class="c2">false</span><span>. There is no need to quote these values. They are literals, so you enter them just as they appear (</span><span class="c2">true</span><span>&nbsp;and </span><span class="c2">false</span><span>, without quotes</span><span>).</span></p><p class="c0"><span></span></p><p class="c6"><span>Please try again!</span></p><h2 class="c6"><a name="h.hw47khj42g7a"></a><span>String Values</span></h2><p class="c6"><span>String values contain textual information. Like JSON, Quirrel supports </span><span class="c4"><a class="c8" href="http://www.unicode.org/standard/WhatIsUnicode.html">Unicode</a></span><span>, instead of plain ASCII, so you can store text in any language.</span></p><p class="c0"><span></span></p><p class="c6"><span>String values have to be quoted with the double-quote character (&ldquo;). Try entering your email address, like </span><span class="c2">&ldquo;</span><span class="c4 c2"><a class="c8" href="mailto:zombie@precog.com">zombie@precog.com</a></span><span class="c2">&rdquo;</span><span>&nbsp;(including the quotes!).</span></p><h3 class="c6"><a name="h.6b80zia188g8"></a><span>Correct</span></h3><p class="c6"><span>Excellent! Strings are often used to store user-generated content (emails, names, locations, etc.) and categories (gender, age range, province). In addition, strings can be used to contain unstructured text, such as log lines. (Quirrel makes it easy to extract structure out of unstructured text later.)</span></p><h3 class="c6"><a name="h.8457jd8juuos"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no, did something go wrong? Try to enter in some textual information enclosed in double-quotes, such as </span><span class="c2">&ldquo;All work and no play makes Jack a dull boy.&rdquo;</span></p><h2 class="c6"><a name="h.vrhe4jicmg15"></a><span>Numeric Values</span></h2><p class="c6"><span>Numbers contain numeric information, such as prices, counts, or positions. Numbers are not quoted (if you quote them, they represent strings and not numbers).</span></p><p class="c0"><span></span></p><p class="c6"><span>Enter a whole number (like </span><span class="c2">7</span><span>) or a decimal number (like </span><span class="c2">7.123</span><span>) below.</span></p><h3 class="c6"><a name="h.vwoyj4pt3k1l"></a><span>Correct</span></h3><p class="c6"><span>Fantastic! Precog&rsquo;s implementation of Quirrel stores numbers losslessly, and lets you choose a target precision whenever you query, so you can safely use numbers to store currencies and other information where precision is very important.</span></p><h3 class="c6"><a name="h.lok7yktr794w"></a><span>Incorrect</span></h3><p class="c6"><span>Oops. Let&rsquo;s try that one again! Enter a number like 42 and see what happens.</span></p><h2 class="c6"><a name="h.thqyycab3lsb"></a><span>Array Values</span></h2><p class="c6"><span>Arrays contain a sequence of other values. Arrays are denoted by enclosing their values in square brackets and placing comma characters between the elements of the arrays.</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, </span><span class="c2">[1, 2, 3]</span><span>&nbsp;is an array, and so is </span><span class="c2">[[[[&ldquo;a&rdquo;], &ldquo;long&rdquo;], &ldquo;time&rdquo;], &ldquo;ago&rdquo;]</span><span>. Try entering an array that is filled with other values, such as numbers, strings, or other arrays.</span></p><h3 class="c6"><a name="h.gc5iqc82f7zl"></a><span>Correct</span></h3><p class="c6"><span>Awesome job! Arrays are the primary difference between the Quirrel data model and the relational data model. Relational databases can only store &ldquo;flat&rdquo; data, so they aren&rsquo;t very good at doing data science, which usually requires array processing capabilities.</span></p><h3 class="c6"><a name="h.de70dxvvt3yy"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t worry, you can try again! Try entering a simple array, like </span><span class="c2">[1, 2, 3]</span><span>, which is an array that stores three numbers.</span></p><h2 class="c6"><a name="h.awcsvfz102i8"></a><span>Object Values</span></h2><p class="c6"><span>Objects are &ldquo;maps&rdquo; from one value to another. They are similar to records in a relational database. They let you give names to different pieces of data.</span></p><p class="c0"><span></span></p><p class="c6"><span>Objects are denoted with curly braces. Inside the curly braces, you place a list of </span><span class="c5">fields</span><span>, separated by the comma character (,)</span><span>. </span></p><p class="c0"><span></span></p><p class="c6"><span>Every field consists of a &ldquo;name&rdquo; and a &ldquo;value&rdquo;, separated by the colon operator (:).</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, the object </span><span class="c2">{&ldquo;name&rdquo;: &ldquo;John Doe&rdquo;, &ldquo;age&rdquo;: 29}</span><span>&nbsp;contains two pieces of data, one named </span><span class="c2">&ldquo;name&rdquo;</span><span>&nbsp;(equal to </span><span class="c2">&ldquo;John Doe&rdquo;</span><span>), and one named </span><span class="c2">&ldquo;age&rdquo;</span><span>&nbsp;(equal to </span><span class="c2">29</span><span>).</span></p><p class="c0"><span></span></p><p class="c6"><span>Try entering an object now.</span></p><h3 class="c6"><a name="h.mnazb7rn5d2e"></a><span>Correct</span></h3><p class="c6"><span>Most excellent! Field values don&rsquo;t have to be strings or numbers, they can be any value in the Quirrel data model. Try entering an object that contains not just simple values, but at least one array or other object (such a thing is called a </span><span class="c5">nested data structure</span><span>).</span></p><h3 class="c6"><a name="h.tzvtbrtsdlkt"></a><span>Incorrect</span></h3><p class="c6"><span>Uh oh. Did something go wrong? Try entering an object again, making sure you have opening and closing curly braces, that each field value is valid, and that fields are separated by the comma character. For example, </span><span class="c2">{&ldquo;state&rdquo;: &ldquo;Colorado&rdquo;, &ldquo;country&rdquo;: &ldquo;USA&rdquo;}</span><span>.</span></p><h2 class="c6"><a name="h.ij9by4z5xrmu"></a><span>Null Values</span></h2><p class="c6"><span>Null values can be used for anything you want. They are often used as sentinel values, to indicate that information is missing or not appropriate.</span></p><p class="c0"><span></span></p><p class="c6"><span>There is only one null value, and it&rsquo;s denoted </span><span class="c2">null</span><span>. Try entering either </span><span class="c2">null</span><span>&nbsp;directly, or an object or array that contains a </span><span class="c2">null</span><span>&nbsp;value.</span></p><h3 class="c6"><a name="h.2p35cjyyeo6f"></a><span>Correct</span></h3><p class="c6"><span>Nice job! Unlike in SQL, null values don&rsquo;t have any special meaning in Quirrel. This means, for example, that </span><span class="c2">null</span><span>&nbsp;is equal to </span><span class="c2">null</span><span>, just like </span><span class="c2">5</span><span>&nbsp;is equal to </span><span class="c2">5</span><span>&nbsp;(in SQL, null is not equal to itself, or any other value)</span><span>.</span></p><h3 class="c6"><a name="h.l3e6uic70ymc"></a><span>Incorrect</span></h3><p class="c6"><span>Let&rsquo;s try that one again! Enter </span><span class="c2">null</span><span>&nbsp;directly, or an object or array containing a </span><span class="c2">null</span><span>&nbsp;value.</span></p><h2 class="c6"><a name="h.f27dzon25t33"></a><span>Undefined Values</span></h2><p class="c6"><span>Undefined is a very special value in Quirrel, which you can think of as a marker to indicate something has no value (you can also think of it as a special empty set).</span></p><p class="c0"><span></span></p><p class="c6"><span>The undefined value is denoted with </span><span class="c2">undefined</span><span>. Try entering </span><span class="c2">undefined</span><span>&nbsp;below.</span></p><h3 class="c6"><a name="h.pnbufsd3zg3w"></a><span>Correct</span></h3><p class="c6"><span>Awesome! Undefined is similar to SQL&rsquo;s </span><span class="c2">null</span><span>. For example, </span><span class="c2">undefined</span><span>&nbsp;is not equal to itself, and if you compare </span><span class="c2">undefined</span><span>&nbsp;with anything else, you&rsquo;ll get back an </span><span class="c2">undefined</span><span>&nbsp;result.</span></p><h3 class="c6"><a name="h.tupl6r8zz9g1"></a><span>Incorrect</span></h3><p class="c6"><span>Try again! Enter </span><span class="c2">undefined</span><span>&nbsp;and see what you get back.</span></p><h2 class="c6"><a name="h.xryyrqb1na5l"></a><span>Boolean Operators: Equality</span></h2><p class="c6"><span>Quirrel supports </span><span class="c5">boolean operators</span><span>, which let you produce boolean values and combine boolean values to produce other boolean values.</span></p><p class="c0"><span></span></p><p class="c6"><span>Let&rsquo;s start off by looking at the equality operator, which is represented with the equals symbol (=). The equality operator lets you determine if two values are equal. If you write an expression like </span><span class="c2">4 = 2</span><span>, the result will be a boolean value, either </span><span class="c2">true</span><span>&nbsp;(if they are equal) or </span><span class="c2">false</span><span>&nbsp;(if they are not equal).</span></p><p class="c0"><span></span></p><p class="c6"><span>Try writing an expression that uses the equality operator and see what you get back.</span></p><h3 class="c6"><a name="h.ry7aojc6jv2"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;re doing great! The equality operator in Quirrel is the same as the equality operator in SQL. Many programming languages, however, use the </span><span class="c5">double-equals operator</span><span>&nbsp;for equality (==), and reserve the single-equals operator for assignment. Quirrel uses colon-equals for assignment (:=). Be sure not to confuse the two!</span></p><h3 class="c6"><a name="h.sb88h95a9xxv"></a><span>Incorrect</span></h3><p class="c6"><span>Oh well, you can always try again! Try entering some expression that uses the equality operator, like </span><span class="c2">&ldquo;foo&rdquo; = &ldquo;foo&rdquo;</span><span>.</span></p><h2 class="c6"><a name="h.rvxo52heriqc"></a><span>Boolean Operators: Inequality</span></h2><p class="c6"><span>The inequality operator, represented by the exclamation-equals symbol (!=), lets you determine if two values are equal. In an expression like </span><span class="c2">2 != 4</span><span>, the result will be </span><span class="c2">true</span><span>&nbsp;if the values are not equal, and </span><span class="c2">false</span><span>&nbsp;if they are the same.</span></p><p class="c0"><span></span></p><p class="c6"><span>Enter an expression like </span><span class="c2">&ldquo;42&rdquo; != 42</span><span>&nbsp;to see what the result is.</span></p><h3 class="c6"><a name="h.cc8z75o5t1ig"></a><span>Correct</span></h3><p class="c6"><span>Superb! The inequality operator is often pronounced &ldquo;not equals&rdquo;. Most programming languages use the same symbol that Quirrel uses for inequality, although SQL and some programming languages use </span><span class="c2">&lt;&gt;</span><span>.</span></p><h3 class="c6"><a name="h.sd0whp2pbqcf"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no, it looks like there was a problem! Try entering some expression that uses the inequality operator, such as </span><span class="c2">false != true</span><span>.</span></p><h2 class="c6"><a name="h.fostillg416m"></a><span>Boolean Operators: Comparison</span></h2><p class="c6"><span>Quirrel has four comparison operators which can be used to determine the relative ordering of two values. These operators are the less-than (&lt;), less-than-or-equal (&lt;=), greater-than (&gt;), and greater-than-or-equal (&gt;=) operators. </span></p><p class="c0"><span></span></p><p class="c6"><span>All of the comparison operators return boolean values to indicate the truth or falsity of the specified ordering. For example, the expression </span><span class="c2">2 &gt; 1</span><span>&nbsp;returns </span><span class="c2">true</span><span>, because </span><span class="c2">2</span><span>&nbsp;is in fact greater than </span><span class="c2">1</span><span>, while the expression </span><span class="c2">1 &gt; 2</span><span>&nbsp;returns </span><span class="c2">false</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try entering an expression that uses one of the boolean comparison operators.</span></p><h3 class="c6"><a name="h.jw5fzr2799l6"></a><span>Correct</span></h3><p class="c6"><span>Great job! Quirrel uses the same operators for comparison that most programming languages and query languages use.</span></p><h3 class="c6"><a name="h.kxauupee5ixh"></a><span>Incorrect</span></h3><p class="c6"><span>Oops! Let&rsquo;s try that one again. Please enter any expression that uses one of the four comparison operators, such as </span><span class="c2">2 &gt;= 1</span><span>.</span></p><h2 class="c6"><a name="h.r1pnt98rjj1l"></a><span>Boolean Operators: Disjunctions</span></h2><p class="c6"><span>Quirrel has support for disjunctions (logical or), represented with the vertical pipe symbol (|).</span></p><p class="c0"><span></span></p><p class="c6"><span>Disjunctions let you determine if either or both of two expressions are true. For example, the expression </span><span class="c2">1 = 2 | 1 = 1</span><span>&nbsp;is </span><span class="c2">true</span><span>, because even though it is </span><span class="c5">not</span><span>&nbsp;</span><span class="c2">true</span><span>&nbsp;that </span><span class="c2">1 = 2</span><span>, it </span><span class="c5">is</span><span>&nbsp;</span><span class="c2">true</span><span>&nbsp;that </span><span class="c2">1 = 1</span><span>. Similarly, the expression </span><span class="c2">true | true</span><span>&nbsp;is </span><span class="c2">true</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try entering in a disjunction, such as </span><span class="c2">1 &gt; 2 | 2 &gt; 1</span><span>. You will get back a boolean value that tells you whether the expression is true or false.</span></p><h3 class="c6"><a name="h.wgcu6h5o5yl"></a><span>Correct</span></h3><p class="c6"><span>Incredible! Disjunctions are sometimes defined by truth tables, which tell you what the result will be given some combination of boolean inputs. The truth table for disjunction looks something like: </span><span class="c2">true | true = true</span><span>, </span><span class="c2">true | false = true</span><span>, </span><span class="c2">false | true = true</span><span>, </span><span class="c2">false | false = false</span><span>.</span></p><h3 class="c6"><a name="h.c0ugcxgptktq"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t be discouraged, you can try again! Just enter any expression that uses a disjunction, such as </span><span class="c2">12 = &ldquo;12&rdquo; | 12 != &ldquo;12&rdquo;</span><span>.</span></p><h2 class="c6"><a name="h.68u0em44g1w"></a><span>Boolean Operators: Conjunctions</span></h2><p class="c6"><span>Quirrel has support for conjunctions (logical and), represented with the ampersand symbol (&amp;).</span></p><p class="c0"><span></span></p><p class="c6"><span>Conjunctions let you determine if both of two expressions are true. For example, the expression </span><span class="c2">1 = 1 &amp; 1 != &ldquo;1&rdquo;</span><span>&nbsp;is </span><span class="c2">true</span><span>, because both </span><span class="c2">1 = 1</span><span>&nbsp;and </span><span class="c2">1 != &ldquo;1&rdquo;</span><span>&nbsp;are </span><span class="c2">true</span><span>. However, the expression </span><span class="c2">&ldquo;foo&rdquo; != &ldquo;foo&rdquo; &amp; &ldquo;bar&rdquo; = &ldquo;bar&rdquo;</span><span>&nbsp;is </span><span class="c2">false</span><span>, because even though </span><span class="c2">&ldquo;bar&rdquo; = &ldquo;bar&rdquo;</span><span>, it is not the case that </span><span class="c2">&ldquo;foo&rdquo; != &ldquo;foo&rdquo;</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try entering an expression with a conjunction, such as </span><span class="c2">false &amp; 2 &gt; 0</span><span>, to see what you get.</span></p><h3 class="c6"><a name="h.8yzrztv015pj"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;re doing great! The truth table for conjunction looks something like: </span><span class="c2">true | true = true</span><span>, </span><span class="c2">true | false = false</span><span>, </span><span class="c2">false | true = false</span><span>, </span><span class="c2">false | false = false</span><span>.</span></p><h3 class="c6"><a name="h.tro6nrei2wgq"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no! There was some sort of problem. Try again by entering any expression that uses a conjunction, such as </span><span class="c2">1 &lt; 2 &amp; 1 != 0</span><span>.</span></p><h2 class="c6"><a name="h.nswn63rx1gao"></a><span>Boolean Operators: Negation</span></h2><p class="c6"><span>The truth or falsity of any boolean expression can be negated with the logical negation symbol (!), which must precede the expression.</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, </span><span class="c2">!(5 = 5)</span><span>&nbsp;yields false, because </span><span class="c2">5 = 5</span><span>&nbsp;yields </span><span class="c2">true</span><span>, and the negation of </span><span class="c2">true</span><span>&nbsp;is </span><span class="c2">false</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try entering any expression that uses logical negation.</span></p><h3 class="c6"><a name="h.xjrnotdnv71e"></a><span>Correct</span></h3><p class="c6"><span>Perfect! The truth table for negation only has two cases: </span><span class="c2">!true = false</span><span>, </span><span class="c2">!false = true</span><span>. The exclamation mark symbol is widely used for logical negation.</span></p><h3 class="c6"><a name="h.653w8bqm74qy"></a><span>Incorrect</span></h3><p class="c6"><span>Not quite, but you can try again! Just enter any expression that uses the logical negation operator, such as </span><span class="c2">!true</span><span>.</span></p><h2 class="c6"><a name="h.tk9yk4dg062s"></a><span>Math Operators</span></h2><p class="c6"><span>Quirrel supports all the standard mathematical operators, including addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and exponentiation (^). They perform the same functions (and with the same precedence) as you would expect.</span></p><p class="c0"><span></span></p><p class="c6"><span>This means you can use Quirrel as a fancy calculator! Try entering in a math expression, like </span><span class="c2">2 + 2</span><span>&nbsp;or </span><span class="c2">10 / 2</span><span>.</span></p><h3 class="c6"><a name="h.vkv755olflbq"></a><span>Correct</span></h3><p class="c6"><span>Fantastic work! These operators are just the beginning of Quirrel&rsquo;s support for mathematics. Through the standard library, Quirrel has many other functions that can help you perform mathematical calculations.</span></p><h3 class="c6"><a name="h.a67we6bloy2q"></a><span>Incorrect</span></h3><p class="c6"><span>Aww, shucks! Math isn&rsquo;t for everyone, but don&rsquo;t give up yet! Enter in some simple math expression, like </span><span class="c2">1 + 1</span><span>, and see what you get back.</span></p><h2 class="c6"><a name="h.n6ewzzjs7r63"></a><span>Conditional Operator</span></h2><p class="c6"><span>Quirrel has a conditional operator similar to conditionals in other languages. </span></p><p class="c0"><span></span></p><p class="c6"><span>The operator is called the </span><span class="c5">if/then/else operator</span><span>, and the syntax is </span><span class="c2">if p then x else y</span><span>, where </span><span class="c2">p</span><span>&nbsp;is a boolean expression. The expression </span><span class="c2">if 2 &gt; 1 then &quot;greater&quot; else &quot;not greater&quot; </span><span>yields the string </span><span class="c2">&quot;greater&quot;</span><span>, because </span><span class="c2">2</span><span>&nbsp;is in fact greater than </span><span class="c2">1</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Experiment below with the conditional operator by entering some simple conditional.</span></p><h3 class="c6"><a name="h.1rsn9ev71ugu"></a><span>Correct</span></h3><p class="c6"><span>Nice job! Unlike conditionals in most programming languages, the </span><span class="c2">else</span><span>&nbsp;part of the conditional is required. Every expression in Quirrel has to yield some value. If you don&rsquo;t have anything meaningful to yield, use the </span><span class="c2">undefined</span><span>&nbsp;value.</span></p><h3 class="c6"><a name="h.4s1plchdb8k3"></a><span>Incorrect</span></h3><p class="c6"><span>It&rsquo;s not too late to try again! Just enter a simple conditional expression like, </span><span class="c2">if true then 1 else 2</span><span>, and see what you get back.</span></p><h2 class="c6"><a name="h.1yza2fazz3u3"></a><span>Assignment Operator</span></h2><p class="c6"><span>The assignment operator (:=) gives a name to an arbitrary Quirrel expression. The operator can be quite useful when you need to reuse some result in several places, or when you want to give a name to an expression to make its intended purpose clearer to someone reading it.</span></p><p class="c0"><span></span></p><p class="c6"><span>The assignment </span><span class="c2">x := 2</span><span>&nbsp;gives the name </span><span class="c2">x</span><span>&nbsp;to the expression </span><span class="c2">2</span><span>. If you reference </span><span class="c2">x</span><span>&nbsp;later in your Quirrel script, then Quirrel will use the value </span><span class="c2">2</span><span>&nbsp;in place of that reference.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try performing an assignment and returning the result, such as: </span><span class="c2">x := 2; x * x</span><span>.</span></p><h3 class="c6"><a name="h.sgte0sq2ex5u"></a><span>Correct</span></h3><p class="c6"><span>Absolutely correct! Assignments in Quirrel shadow whatever came before them by the same name. So, for example, if you create two assignments for </span><span class="c2">x </span><span>(</span><span class="c2">x := 1; x := 2; x</span><span>)</span><span>, then the latter one will take precedence over the former one.</span></p><h3 class="c6"><a name="h.qrqh0zpac8w7"></a><span>Incorrect</span></h3><p class="c6"><span>Awww! Don&rsquo;t worry, try again. Give a name to any expression, and then return that expression. For example, the query </span><span class="c2">name := &ldquo;Mary Jane&rdquo;; name</span><span>&nbsp;will yield the string </span><span class="c2">&ldquo;Mary Jane&rdquo;</span><span>.</span></p><h2 class="c6"><a name="h.vyvm0sd8hiev"></a><span>Array Drilldown Operator</span></h2><p class="c6"><span>Arrays have many elements, and sometimes, you need to inspect a certain element. For this, you can use the </span><span class="c2">array drilldown operator</span><span>&nbsp;(</span><span class="c2">[]</span><span>).</span></p><p class="c0"><span></span></p><p class="c6"><span>If </span><span class="c2">x</span><span>&nbsp;is an array, then </span><span class="c2">x[0]</span><span>&nbsp;refers to the first element of the array. Similarly, </span><span class="c2">x[1]</span><span>&nbsp;is the second element of the array, and so on. If you try to access an element that isn&rsquo;t defined, the result will be </span><span class="c2">undefined</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try creating an array, naming that array, and using the array drilldown operator to extract one of the elements of the array.</span></p><h3 class="c6"><a name="h.ccygul9b767k"></a><span>Correct</span></h3><p class="c6"><span>Awesome! The array drilldown operator is most useful when you are using arrays as tuples or vectors, when you know the precise location of the element you are looking for.</span></p><h3 class="c6"><a name="h.ngnsu8somk9d"></a><span>Incorrect</span></h3><p class="c6"><span>Crud! Please try again by creating an array, naming that array, and using the array drilldown operator (for example, </span><span class="c2">x := [&ldquo;Egg&rdquo;, &ldquo;&amp;&rdquo;, &ldquo;I&rdquo;]; x[1]</span><span>).</span></p><h2 class="c6"><a name="h.w805unxi0w42"></a><span>Object Drilldown Operator</span></h2><p class="c6"><span>Objects have many fields, and usually you are interested in only some of them. To help you access a single field value, you can use the </span><span class="c2">object drilldown operator </span><span>(</span><span class="c2">.</span><span>)</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>If </span><span class="c2">x</span><span>&nbsp;is an object with fields named </span><span class="c2">&ldquo;gender&rdquo;</span><span>, </span><span class="c2">&ldquo;name&rdquo;</span><span>, and </span><span class="c2">&ldquo;age&rdquo;</span><span>, then you can access the </span><span class="c2">&ldquo;gender&rdquo;</span><span>&nbsp;field with the syntax </span><span class="c2">x.gender</span><span>. Similarly, you can access the </span><span class="c2">&ldquo;age&rdquo;</span><span>&nbsp;field with the syntax </span><span class="c2">x.age</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Experiment with the object drilldown operator by creating an object, naming that object, and using the object drilldown operator to extract out one of the fields of the object.</span></p><h3 class="c6"><a name="h.h2c2aklvvat7"></a><span>Correct</span></h3><p class="c6"><span>Great job! The object drilldown operator in Quirrel uses the same syntax and has the same purpose as the object dereference operator in JavaScript. It&rsquo;s also the same operator that SQL uses to specify a particular column from a table.</span></p><h3 class="c6"><a name="h.ba6lpwflgzcg"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t give up yet! Just create an object, give it a name, and use the object drilldown operator to extract out a single field (for example, </span><span class="c2">x := {&ldquo;age&rdquo;: 19}; x.age}</span><span>).</span></p><h2 class="c6"><a name="h.d9h492o58kle"></a><span>Object Augmentation</span><sup><a href="#cmnt1" name="cmnt_ref1">[a]</a></sup></h2><p class="c6"><span>Sometimes, you need to add some information to an object (for example, add a field that is derived from other fields in the object). Quirrel supports this through the </span><span class="c2">with</span><span>&nbsp;operator.</span></p><p class="c0"><span></span></p><p class="c6"><span>The syntax is quite simple: </span><span class="c2">a with b</span><span>, where </span><span class="c2">a</span><span>&nbsp;is the object you want to augment, and </span><span class="c2">b</span><span>&nbsp;is the augmentation object with the new fields.</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, </span><span class="c2">{&ldquo;name&rdquo;: &ldquo;John Doe&rdquo;} with {&ldquo;age&rdquo;: 29}</span><span>&nbsp;adds the </span><span class="c2">age</span><span>&nbsp;field to the object which contains a </span><span class="c2">name</span><span>&nbsp;field. Try the feature out for yourself: create an object and add a field to it.</span></p><h3 class="c6"><a name="h.8m81ermi1j6a"></a><span>Correct</span></h3><p class="c6"><span>Nice work! Augmentation is often used to add or refine structure. Quirrel lets you start with semi-structured data, and slowly extract out more structure for subsequent analysis.</span></p><h3 class="c6"><a name="h.4gzzmquomqrm"></a><span>Incorrect</span></h3><p class="c6"><span>Oops. Let&rsquo;s try that one again. Create any object and use the </span><span class="c2">with</span><span>&nbsp;operator to add one or more fields to the object.</span></p><h2 class="c6"><a name="h.b7sdgwf2r7ad"></a><span>Assert Operator</span><sup><a href="#cmnt2" name="cmnt_ref2">[b]</a></sup></h2><p class="c6"><span>When writing more complicated Quirrel scripts, you may want to verify certain expectations. To help you do that, Quirrel has an assert operator.</span></p><p class="c0"><span></span></p><p class="c6"><span>The syntax for the assert operator is simply </span><span class="c2">assert x</span><span>, where </span><span class="c2">x</span><span>&nbsp;is a boolean condition. The boolean condition does not hold in all cases, then you will get an error when you run the query.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try the operator for yourself below!</span></p><h3 class="c6"><a name="h.92z1dgbku309"></a><span>Correct</span></h3><p class="c6"><span>Nice work! The assert operator can make your life a lot easier when you start doing very complicated things in Quirrel. For Quirrel that runs in production, consider removing your assert operators so your code won&rsquo;t fail at runtime.</span></p><h3 class="c6"><a name="h.oghrqa4qcnan"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no! Was there some problem? Try using the assert operator again in some simple query, like </span><span class="c2">assert 2 &gt; 4; &ldquo;foo&rdquo;</span><span>.</span></p><h2 class="c6"><a name="h.td2p8d0n6t4"></a><span>Conclusion</span></h2><p class="c6"><span>Congratulations! You&rsquo;ve finished the first level of Quirrel Game I! You now have a basic mastery of the Quirrel data model and all the core Quirrel operators. </span></p><p class="c0"><span></span></p><p class="c6"><span>In the next level, you get to start working with whole data sets, as you learn about loading and manipulating data. Good luck!</span></p><h1 class="c6"><a name="h.1m48ebwvrs8c"></a><span>Level 2: Loading &amp; Manipulating Data</span></h1><h2 class="c6"><a name="h.miwqbp95p9l7"></a><span>Load Function</span></h2><p class="c6"><span>In this level, we&rsquo;re going to learn about loading data sets and manipulating them in a variety of useful ways. You&rsquo;ll build upon what you learned in Level 1, and reach a level of maturity that lets you begin solving real-world problems with Quirrel.</span></p><p class="c0"><span></span></p><p class="c6"><span>Quirrel embraces the metaphor of a file system for organizing data. All data is stored somewhere in the file system. To load data from a location, you can use the </span><span class="c2">load()</span><span>&nbsp;function, and specify a string that represents the location of the data you want to load.</span></p><p class="c0"><span></span></p><p class="c6"><span>In the demo environment for this game, there are quite a few data sets already preloaded. One of them is stored in the </span><span class="c2">/summer_games/london_medals</span><span>&nbsp;directory. This contains data for winning athletes of the 2012 Olympic Summer Games held in London.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try loading this data set by typing in </span><span class="c2">load(&quot;/summer_games/london_medals&quot;)</span><span>&nbsp;and seeing what you get back.</span></p><h3 class="c6"><a name="h.j7yyrrpw1b71"></a><span>Correct</span></h3><p class="c6"><span>Superb! Notice that Quirrel uses the forward slash to separate paths in the file system, which is the same character used by the World Wide Web and most operating systems. Paths serve a similar purpose in Quirrel as databases, tables, and collections serve in other data management systems -- they let you organize information in a hierarchical fashion.</span></p><h3 class="c6"><a name="h.9qdklcceabjr"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no, what went wrong? Please try again, and make sure you enclose the path in double quotes (for example, </span><span class="c2">load(&ldquo;/summer_game/london_medals&rdquo;)</span><span>).</span></p><h2 class="c6"><a name="h.1xyn2zolq8yl"></a><span>Path Literals</span></h2><p class="c6"><span>Loading data from directories is so common, there&rsquo;s a shorthand notation for it.</span></p><p class="c0"><span></span></p><p class="c6"><span>To load all data in some directory </span><span class="c2">foo</span><span>, simply enter </span><span class="c2">//foo</span><span>. This is equivalent to </span><span class="c2">load(&ldquo;/foo&rdquo;)</span><span>, with one exception that you&rsquo;ll learn about in the next question.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try loading the same data set you did in the last question (</span><span class="c2">/summer_games/london_medals</span><span>), but this time using the path literal syntax.</span></p><h3 class="c6"><a name="h.ruyuxlcyladb"></a><span>Correct</span></h3><p class="c6"><span>Nice work! Precog&rsquo;s implementation of Quirrel lets you specify a limit on how many results will be returned from a query. This can be useful to prevent accidentally crashing browser-based tools, which cannot handle large amounts of data.</span></p><h3 class="c6"><a name="h.p9obggybtlyk"></a><span>Incorrect</span></h3><p class="c6"><span>Oops! Let&rsquo;s try that one again. Just specify the path literal </span><span class="c2">//summer_games/london_medals</span><span>, and see what you get back!</span></p><h2 class="c6"><a name="h.dq6elgd46erk"></a><span>Glob Patterns</span></h2><p class="c6"><span>In Quirrel, it&rsquo;s possible to perform analysis across data that spans different directories. One feature that makes this really easy is Quirrel&rsquo;s support for </span><span class="c5">globbing</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>To load data in all subfolders of a directory </span><span class="c2">foo</span><span>, just use the syntax </span><span class="c2">/foo/*</span><span>. The asterisk symbol (*) can be thought of as a wildcard that stands for any child in the specified parent.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try loading all data in the children of the </span><span class="c2">/summer_games/</span><span>&nbsp;directory using globbing.</span></p><h3 class="c6"><a name="h.t96i2pkujd4h"></a><span>Correct</span></h3><p class="c6"><span>Fantastic! Precog is often used to build multi-tenant analytics into existing applications. In this use case, different paths can store data for different customers. Globbing can make it easy to perform cross-customer analysis.</span></p><h3 class="c6"><a name="h.xlwkrivr98rn"></a><span>Incorrect</span></h3><p class="c6"><span>Not quite right, but you can try again! Please try loading a path using the globbing syntax (e.g. </span><span class="c2">//summer_games/*</span><span>).</span></p><h2 class="c6"><a name="h.cl63u8i37q7o"></a><span>Bulk Processing: Object Drilldown</span></h2><p class="c6"><span>From this point onward, all the Quirrel scripts you write will be working with whole sets of data (instead of just single values). But don&rsquo;t worry, all the operators you learned about in Level 1 work just fine with sets of values.</span></p><p class="c0"><span></span></p><p class="c6"><span>Quirrel&rsquo;s operators are automatically applied in bulk to all the elements of a set. For example, if </span><span class="c2">foo</span><span>&nbsp;is a set of objects, then </span><span class="c2">foo.bar</span><span>&nbsp;is another set, constructed by drilling down into the </span><span class="c2">bar</span><span>&nbsp;field for every object in the </span><span class="c2">foo</span><span>&nbsp;set.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try loading the London data set, giving the set a name, and drilling down into the </span><span class="c2">Age</span><span>&nbsp;field of the set (hint: the London data set is located in </span><span class="c2">/summer_games/london_medals</span><span>).</span></p><h3 class="c6"><a name="h.23hy2yamr2to"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;re getting it! Quirrel is very similar to SQL and array processing languages. You almost never loop through elements individually. Instead, you usually apply operations in bulk across entire sets of data, which makes it easier for you to analyze large data sets.</span></p><h3 class="c6"><a name="h.slnxnsmetpvr"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t give up! You&rsquo;re so close. If you are using path literals, and you aren&rsquo;t giving the data set a name, be sure to wrap parentheses around the path literal (e.g. </span><span class="c2">(//summer_games/london_medals).Age</span><span>) or else Quirrel will think you&rsquo;re loading a data set called </span><span class="c2">/summer_games/london_medals.Age</span><span>.</span></p><h2 class="c6"><a name="h.al37nz78218w"></a><span>Bulk Processing: Scalar Multiplication</span></h2><p class="c6"><span>As another example of Quirrel&rsquo;s bulk processing, try multiplying every age in the London data set by 12, to see the age of all athletes in months.</span></p><h3 class="c6"><a name="h.55l4rqxd67to"></a><span>Correct</span></h3><p class="c6"><span>Awesome! Once you get used to the idea of bulk processing, you&rsquo;ll wonder how you ever survived so long without it! Bulk processing lets you express your intention simply and cleanly, without any of the boilerplate that would otherwise be required.</span></p><h3 class="c6"><a name="h.623god8770yn"></a><span>Incorrect</span></h3><p class="c6"><span>Aww, don&rsquo;t give up just yet! Just load the summer games data set (</span><span class="c2">//summer_games/london_medals</span><span>), drill down into the </span><span class="c2">Age</span><span>&nbsp;field, and multiply by 12.</span></p><h2 class="c6"><a name="h.dirwrlp0w4g6"></a><span>Relatedness </span></h2><p class="c6"><span>In Quirrel, if you take one set, say </span><span class="c2">foo</span><span>, and apply an operation to it, for example, drilldown into the </span><span class="c2">bar</span><span>&nbsp;property of all the objects in </span><span class="c2">foo</span><span>, then the resulting set is said to be </span><span class="c5">related to</span><span>&nbsp;</span><span class="c2">foo</span><span>. For example, </span><span class="c2">foo</span><span>&nbsp;is related to </span><span class="c2">foo.bar</span><span>, and </span><span class="c2">foo * 2</span><span>&nbsp;is related to </span><span class="c2">foo</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Quirrel keeps track of these relations. In any derived set, Quirrel knows which values in the derived set came from which values in the original set.</span></p><p class="c0"><span></span></p><p class="c6"><span>Quirrel uses relations to determine how to evaluate expressions like </span><span class="c2">foo.a + foo.b</span><span>. In this example, Quirrel matches up all the </span><span class="c2">foo.a</span><span>&nbsp;values to the </span><span class="c2">foo.b</span><span>&nbsp;values based on which value in </span><span class="c2">foo</span><span>&nbsp;they came from, and then adds those pairs.</span></p><p class="c0"><span></span></p><p class="c6"><span>This means the expression </span><span class="c2">orders.shipping + orders.handling</span><span>&nbsp;does exactly what you think: for each order inside the set </span><span class="c2">orders</span><span>, it adds the shipping and handling, so you end up with a set containing the summed shipping and handling charges for all orders.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try this feature for yourself on the London summer games data (</span><span class="c2">/summer_games/london_medals</span><span>). Compute the </span><span>body mass index</span><sup><a href="#cmnt3" name="cmnt_ref3">[c]</a></sup><span>&nbsp;for all the athletes by multiplying their height (</span><span class="c2">HeightIncm</span><span>) by their weight (</span><span class="c2">Weight</span><span>).</span></p><h3 class="c6"><a name="h.wgdtfxbk3ykh"></a><span>Correct</span></h3><p class="c6"><span>Awesome! Try playing around for a few minutes with this feature so you gain an intuition for what happens when you apply operators like </span><span class="c2">+</span><span>&nbsp;to entire sets of data.</span></p><h3 class="c6"><a name="h.r7tmgl7x7zsb"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t sweat it, you can try again! Load the data set and give it a name (</span><span class="c2">medals := //summer_games/london_medals</span><span>), then multiply the </span><span class="c2">HeightIncm</span><span>&nbsp;field by the </span><span class="c2">Weight</span><span>&nbsp;field. Good luck!</span></p><h2 class="c6"><a name="h.qnsbedr0m3mh"></a><span>Bulk Processing: Object Manipulation</span></h2><p class="c6"><span>Quirrel is a very composable language. You can combine all the different features you&rsquo;ve learned together in very powerful ways.</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, let&rsquo;s say you want to take a set of objects, and change their structure in some way. You can do this by combining several operators you learned in Level 1.</span></p><p class="c0"><span></span></p><p class="c6"><span>The following query manipulates the structure of the London medals data set:</span></p><p class="c0"><span></span></p><p class="c7 c6"><span class="c2">london := //summer_games/london_medals</span></p><p class="c7 c6"><span class="c2">{name: london.Name, age: London.Age}</span></p><p class="c0"><span></span></p><p class="c6"><span>The resulting data set has only two fields (</span><span class="c2">name</span><span>&nbsp;and </span><span class="c2">age</span><span>).</span></p><p class="c0"><span></span></p><p class="c6"><span>Try loading the </span><span class="c2">//clicks</span><span>&nbsp;data set and manipulating the structure of objects in there (changing field names, removing fields, or adding fields).</span></p><h3 class="c6"><a name="h.6tkf1pfgk3ai"></a><span>Correct</span></h3><p class="c6"><span>Nice work! Quirrel has great support for reshaping data, as well as extracting structure out of unstructured data (such as raw strings).</span></p><h3 class="c6"><a name="h.jmucejvnqng8"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t be discouraged, you can always try again! Try loading the </span><span class="c2">//clicks</span><span>&nbsp;data set and changing the structure of some data in there.</span></p><h2 class="c6"><a name="h.ue82zvawumgf"></a><span>Filtering: Simple</span></h2><p class="c6"><span>One of the most common things you can do with a set of data is filter it &ndash; removing values that do not satisfy some constraint. For example, you might want to look at all sales where the gender of the person who placed the order is female.</span></p><p class="c0"><span></span></p><p class="c6"><span>Quirrel supports filtering using the </span><span class="c2">where</span><span>&nbsp;operator. The syntax is </span><span class="c2">a where b</span><span>, where </span><span class="c2">a</span><span>&nbsp;is the set you want to filter, and </span><span class="c2">b</span><span>&nbsp;is a set of boolean values (of course, the sets have to be related).</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, the expression </span><span class="c2">orders where orders.name != &ldquo;Mary Smith&rdquo;</span><span>&nbsp;filters out all the orders where the name is equal to </span><span class="c2">&ldquo;Mary Smith&rdquo;</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try filtering the Olympic data set (</span><span class="c2">//summer_games/london_medals</span><span>) so you only get back medal information for athletes under 20 years of age.</span></p><h3 class="c6"><a name="h.3lpc6zoh6lyv"></a><span>Correct</span></h3><p class="c6"><span>Incredible work! If you use a filter such as </span><span class="c2">foo where true</span><span>, then you&rsquo;ll end up getting the entire set </span><span class="c2">foo</span><span>&nbsp;back. Similarly, if you use a filter like </span><span class="c2">foo where false</span><span>, you&rsquo;ll get an empty set back.</span></p><h3 class="c6"><a name="h.bgyhme2pgq5z"></a><span>Incorrect</span></h3><p class="c6"><span>Oops! Try that one again. Use the </span><span class="c2">where</span><span>&nbsp;operator to filter the Olympic data set (</span><span class="c2">//summer_games/london_medals</span><span>) so you only get back data on athletes under 20 years of age.</span></p><h2 class="c6"><a name="h.mxssk1jo22rx"></a><span>Filtering: Complex</span></h2><p class="c6"><span>When you are filtering in Quirrel, you can express complex filters using the disjunction (|), conjunction (&amp;), comparison (&lt;, &lt;=, &gt;, &gt;=), and inequality (!=) operators.</span></p><p class="c0"><span></span></p><p class="c6"><span>Take, for example, the following expression </span><span class="c2">orders where orders.name != &ldquo;Mary Smith&rdquo; &amp; orders.age &gt; 18 | orders.age &lt; 10</span><span>. This finds all orders by people who are less than 10, or by people who are greater than 18 and not named </span><span class="c2">&ldquo;Mary Smith&rdquo;</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try creating a complex filter yourself by combining some of the above operators on the </span><span class="c2">/clicks</span><span>&nbsp;data set.</span></p><h3 class="c6"><a name="h.4csh5fmmmysx"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;re a natural! Complex filters let you find the exact part of a data set that you are interested in. In addition to the boolean operators introduced in Level 1, you&rsquo;ll soon learn about functions built into Quirrel that can be used to filter text and other unstructured data.</span></p><h3 class="c6"><a name="h.dn73evk7ovty"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t get discouraged! Try a more complex example of filtering, such as </span><span class="c2">clicks where clicks.customer.gender = &ldquo;male&rdquo; &amp; clicks.customer.age &gt; 20</span><span>.</span></p><h2 class="c6"><a name="h.8yygvo5hlghi"></a><span>Union</span></h2><p class="c6"><span>Quirrel lets you take two different sets, and combine them into a single set. The operation that lets you do this is called </span><span class="c5">union</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>To union sets </span><span class="c2">foo</span><span>&nbsp;and </span><span class="c2">bar</span><span>, simply write, </span><span class="c2">foo union bar</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try unioning two different data sets together and see what results you get.</span></p><h3 class="c6"><a name="h.vupauj41y02e"></a><span>Correct</span></h3><p class="c6"><span>Superb! Union is very useful when you are splitting data across a few different directories, and want to analyze data across all the directories.</span></p><h3 class="c6"><a name="h.xk9p3dgos5ey"></a><span>Incorrect</span></h3><p class="c6"><span>No worry, you can always try again. Load two data sets and </span><span class="c2">union</span><span>&nbsp;them together.</span></p><h2 class="c6"><a name="h.rfx4crw1sd7f"></a><span>Difference</span></h2><p class="c6"><span>Similar to union, Quirrel lets you take the difference of two sets, which means taking one set, and removing all elements that are contained in another set.</span></p><p class="c0"><span></span></p><p class="c6"><span>To take the difference of sets </span><span class="c2">a</span><span>&nbsp;and </span><span class="c2">b</span><span>, write </span><span class="c2">a difference b</span><span>. This will return a new set that contains all elements that are in </span><span class="c2">a</span><span>, which are not also in </span><span class="c2">b</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try using the </span><span class="c2">difference</span><span>&nbsp;operator on the </span><span class="c2">//clicks</span><span>&nbsp;data set.</span><sup><a href="#cmnt4" name="cmnt_ref4">[d]</a></sup></p><h3 class="c6"><a name="h.ttz545h6ioqn"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;ve got it! Difference is one way to find data that is missing fields. The expression </span><span class="c2">foo difference (foo where foo.a = foo.a)</span><span>&nbsp;will find all values of </span><span class="c2">foo</span><span>&nbsp;that do not have a field </span><span class="c2">a</span><span>.</span></p><h3 class="c6"><a name="h.w4p4gdxg6ajt"></a><span>Incorrect</span></h3><p class="c6"><span>Awww! No matter, you can try again. Use the difference operator on two sets (any two sets!).</span></p><h2 class="c6"><a name="h.u6gjtevjdnlk"></a><span>Intersection</span></h2><p class="c6"><span>Quirrel also supports taking the intersection of two sets, which gives you all the elements that are contained in </span><span class="c5">both</span><span>&nbsp;of the sets.</span></p><p class="c0"><span></span></p><p class="c6"><span>To take the intersection of sets </span><span class="c2">a</span><span>&nbsp;and </span><span class="c2">b</span><span>, simply write </span><span class="c2">a intersect b</span><span>. The result is a set that contains all the elements that are in both </span><span class="c2">a</span><span>&nbsp;</span><span class="c5">and</span><span>&nbsp;</span><span class="c2">b</span><span>. If an element is in just </span><span class="c2">a</span><span>&nbsp;but not </span><span class="c2">b</span><span>, or in just </span><span class="c2">b</span><span>&nbsp;and not </span><span class="c2">a</span><span>, the element will not be in the result.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try taking the intersection of two sets and see what happens!</span></p><h3 class="c6"><a name="h.q41bhmg8vs77"></a><span>Correct</span></h3><p class="c6"><span>Nice job! Notice that the intersection of any set with </span><span class="c2">undefined</span><span>&nbsp;is always empty. Similarly, the intersection of any set with itself is equal to that set.</span></p><h3 class="c6"><a name="h.a3df3d8ja6hl"></a><span>Incorrect</span></h3><p class="c6"><span>Try again! Perform the intersection on any two sets and see what you get back.</span></p><h1 class="c6"><a name="h.3sfzdodv7zfw"></a><span>Level 3: Standard Library &amp; User-Defined Functions</span></h1><h2 class="c6"><a name="h.x8r4oex8r1ug"></a><span>Reductions: Count</span></h2><p class="c6"><span>In this level, we&rsquo;re going to learn about all the powerful functionality that&rsquo;s already built into Quirrel, which can help you quickly and simply analyze data. We&rsquo;ll also learn how you can build your own library of reusable functionality by creating user-defined functions.</span></p><p class="c0"><span></span></p><p class="c6"><span>Let&rsquo;s start with one of the most common functions built into Quirrel, which is </span><span class="c2">count</span><span>. Count does exactly what you think it does: it returns a count of all the values inside a set.</span></p><p class="c0"><span></span></p><p class="c6"><span>For example, </span><span class="c2">count(//clicks)</span><span>&nbsp;returns a count of all the values loaded from the path </span><span class="c2">/foo</span><span>.</span></p><p class="c0"><span></span></p><p class="c6"><span>The</span><span class="c2">&nbsp;count</span><span>&nbsp;function, along with several other functions in Quirrel, is called a </span><span class="c5">reduction</span><span>&nbsp;because it reduces a whole set of values to a single value.</span></p><p class="c0"><span></span></p><p class="c6"><span>Try counting the values in a set now.</span></p><h3 class="c6"><a name="h.yie3m9x5di1o"></a><span>Correct</span></h3><p class="c6"><span>Awesome! Precog&rsquo;s implementation of Quirrel uses a columnar data format. Counting a single field of an object is much faster than counting the whole object. For example, counting </span><span class="c2">(//clicks).timeStamp</span><span>&nbsp;is faster than counting </span><span class="c2">(//clicks)</span><span>.</span></p><h3 class="c6"><a name="h.phphry81vy7x"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no! Did something go wrong? Try that one again: simply apply the </span><span class="c2">count()</span><span>&nbsp;function to any set!</span></p><h2 class="c6"><a name="h.qaafn0ymmghf"></a><span>Reductions: Sum</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.i1n592jrnoej"></a><span>Reductions: Standard Deviation</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.cisjdjn1qmjr"></a><span>Modules: Introduction</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.jn5wf6nxva8f"></a><span>Modules: Math</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.r32fl681y414"></a><span>Modules: Time</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.wru8dn8rte18"></a><span>Modules: String</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.uquu7g2ka1k3"></a><span>Modules: Statistics</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.klaqq6bf0kot"></a><span>User-Defined Functions</span></h2><p class="c0"><span></span></p><p class="c0"><span></span></p><h1 class="c6"><a name="h.2iwqec8o6pjo"></a><span>Level 4: Introduction to Solve</span></h1><h2 class="c6"><a name="h.4avn0b9806sc"></a><span>Solve: Single Histogram</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.pmyfe5wfcinn"></a><span>Solve: Multiple Histogram</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.x43i5u96cgdy"></a><span>Solve: Single Groups</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.jcdhvhq781hv"></a><span>Solve: Multiple Groups</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.3j07zkwl0cal"></a><span>Solve: Explicit Constraints</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.zek87l2qqamf"></a><span>Solve: Running Totals</span></h2><p class="c0"><span></span></p><h2 class="c6"><a name="h.knh6e8wzcou6"></a><span>Solve: Windowed Aggregates</span></h2><p class="c0"><span></span></p><p class="c0"><span></span></p><h1 class="c6"><a name="h.oadx0knouw2l"></a><span>Level 5: The Quirrel Test</span></h1><h2 class="c6"><a name="h.kbg99fg1krck"></a><span>Quiz 1</span></h2><p class="c6"><span>In this level, we&rsquo;re going to perform a comprehensive test of everything you&rsquo;ve learned so far! The test won&rsquo;t be easy, but if you pass the test with flying colors, not only do you win a prize (some great Precog swag!), but you also will have attained a level of mastery over Quirrel that will permit you to solve most common problems in analytics.</span></p><p class="c0"><span></span></p><p class="c6"><span>To answer some of these questions, you may find it helpful to open </span><span class="c4"><a class="c8" href="https://labcoat.precog.com">Labcoat</a></span><span>&nbsp;and solve the problems there, then paste your answers here.</span></p><p class="c0"><span></span></p><p class="c6"><span>Based on data from </span><span class="c2">/summer_games/london_medals</span><span>, determine the name of the youngest athlete to win a medal.</span></p><h3 class="c6"><a name="h.q2sub3io2qi"></a><span>Correct</span></h3><p class="c6"><span>You&rsquo;re off to a great start!</span></p><h3 class="c6"><a name="h.jr7v1xc43yw6"></a><span>Incorrect</span></h3><p class="c6"><span>Ack! Try again!</span></p><h2 class="c6"><a name="h.wobplfl3nkxd"></a><span>Quiz 2</span></h2><p class="c6"><span>Based on data from </span><span class="c2">/summer_games/london_medals</span><span>, determine the name of the oldest athlete to win a medal.</span></p><h3 class="c6"><a name="h.fnql3q67hj5o"></a><span>Correct</span></h3><p class="c6"><span>Awesome work. Keep it coming!</span></p><h3 class="c6"><a name="h.40uvtp36k02c"></a><span>Incorrect</span></h3><p class="c6"><span>Oh no. Give it another shot!</span></p><h2 class="c6"><a name="h.bpu2hvdgsr4m"></a><span>Quiz 3</span></h2><p class="c6"><span>Based on data from </span><span class="c2">/summer_games/london_medals</span><span>, determine the most common age for an athlete to win a medal.</span></p><h3 class="c6"><a name="h.8zxdhldjtfi"></a><span>Correct</span></h3><p class="c6"><span>Great job! Lots more questions to come.</span></p><h3 class="c6"><a name="h.ny2ceu9d7ivc"></a><span>Incorrect</span></h3><p class="c6"><span>Don&rsquo;t give up. Try again!</span></p><h2 class="c6"><a name="h.2i4vp4yse4fn"></a><span>Quiz 4</span></h2><p class="c6"><span>Based on data from </span><span class="c2">/summer_games/london_medals</span><span>, determine the most common age for an athlete to win a medal.</span></p><h3 class="c6"><a name="h.sfud25azd70y"></a><span>Correct</span></h3><p class="c6"><span>Way to go!</span></p><h3 class="c6"><a name="h.qw2h4k4rv2t9"></a><span>Incorrect</span></h3><p class="c0"><span></span></p><h2 class="c6"><a name="h.tpe095vu45mb"></a><span>Quiz 5</span></h2><p class="c6"><span>Based on data from </span><span class="c2">/summer_games/london_medals</span><span>, determine the most common body mass index (BMI) for athletes who win medals. (Hint: Body mass index is weight multiplied by height.)</span></p><h3 class="c6"><a name="h.35xda8qlyhl1"></a><span>Correct</span></h3><p class="c0"><span></span></p><h3 class="c6"><a name="h.q37uxri46j03"></a><span>Incorrect</span></h3><p class="c0"><span></span></p><h2 class="c6"><a name="h.tj31rpsnh38z"></a><span>Quiz 6</span></h2><p class="c0"><span></span></p><div><p class="c6 c12"><span>&nbsp;/ </span></p></div><div class="c1"><p class="c6 c10"><a href="#cmnt_ref1" name="cmnt1">[a]</a><span>Nathan Lubchenco:</span></p><p class="c6 c10"><span>to add</span></p></div><div class="c1"><p class="c6 c10"><a href="#cmnt_ref2" name="cmnt2">[b]</a><span>John De Goes:</span></p><p class="c6 c10"><span>Assert must be deployed and supported before we can discuss this feature in the tutorial.</span></p></div><div class="c1"><p class="c6 c10"><a href="#cmnt_ref3" name="cmnt3">[c]</a><span>Nathan Lubchenco:</span></p><p class="c6 c10"><span>bmi is: weight in kg/ height in meters^2 </span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>Since we don&#39;t yet support ^ as the power operator and they would need to use the std::math::pow function, we use a simpler example?</span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>although upon thinking about it more, they could use:</span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>medals.weight/(medals.HeightIncm/100 * medals.HeightIncm/100)</span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>which isn&#39;t too bad.</span></p><hr><p class="c6 c10"><span>John De Goes:</span></p><p class="c6 c10"><span>We can probably get ^ deployed very soon -- CC&#39;ing Kris. </span></p><p class="c6 c10"><span>-- </span></p><p class="c6 c10"><span>John A. De Goes </span></p><p class="c6 c10"><span>CEO / CTO / Founder </span></p><p class="c6 c10"><span>Precog - http://precog.com </span></p><p class="c6 c10"><span>Follow us at @precog</span></p></div><div class="c1"><p class="c6 c10"><a href="#cmnt_ref4" name="cmnt4">[d]</a><span>Nathan Lubchenco:</span></p><p class="c6 c10"><span>I think people may get stuck here. &nbsp;Should we move up the example in the correct answer here?</span></p><hr><p class="c6 c10"><span>Nathan Lubchenco:</span></p><p class="c6 c10"><span>for example: if someone does:</span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>//clicks difference //summer_games/london_medals</span></p><p class="c0 c10"><span></span></p><p class="c6 c10"><span>the main two sets they&#39;ve worked with in the tutorial thus far, they get a: cannot perform set difference on two sets which have no commonality (always returns left)</span></p><hr><p class="c6 c10"><span>John De Goes:</span></p><p class="c6 c10"><span>Sure. Try to create a useful example based on the test data sets we have access to.</span></p></div></body></html>