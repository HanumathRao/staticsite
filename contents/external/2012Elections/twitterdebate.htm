<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Presidential Debate Coverage</title>
  <link rel="stylesheet" type="text/css" href="http://api.reportgrid.com/css/rg-charts.css">

  <script src="https://api.reportgrid.com/js/reportgrid-charts.js?authCode=r59uh0XNfjFqI1M%2ByxJK33KGZ0Mm82UqEme9ShK7g12KlIHBhCZK1rFV7KdOHgZ7GAePArW%2FT4EuOgzCPCbZB%2BAGlqH7I8OeRMwxKJA5lSRO1GTNp5IkXcrS4rKVj0KT3jnc%2Fkc6gJBjzZPBwwX10Xgdg2%2B%2FKI1QnoOCVhDJ8Hg%3D"></script>
  <script src="http://api.reportgrid.com/js/precog.js?apiKey=A1C62105-691B-4D77-9372-36A693E5D905&analyticsService=https://beta.precog.com/&basePath=/0000000024/"></script>
<style type="text/css">
body{
  overflow: hidden;
}

#loading-spinner{
   width: 1000px;
  height: 510px;
  background: url(ajax-loader.gif) no-repeat center center;
  position: absolute;
  z-index: 1;
}

.chartExample {
  width: 1000px;
  height: 510px;
  overflow: hidden;
}

.rg line, .rg path {
    stroke: #14171A;
    stroke-width: 2;
    text-rendering: optimizelegibility;
}

h1 {
  font-family: abel, sans-serif;
  font-size: 16pt;
  color: #3E718C;
  text-transform: uppercase;
  text-align: center;
  font-weight: normal;
}

h2 {
font-size: 12pt;
letter-spacing: 1px;
padding-left: 10px;
padding-right: 10px;

}

h3 {
font-size: 18pt;

}

.democrat {
color: #368CE6;
}

.republican{
  color: #DB0000;
}

p {
  font-family: abel, sans-serif;
  font-size: 9pt;
}

ul {
  right: 0px;
  bottom: 0px;
  position: absolute;
  margin: 10px;
}

li {
  color: #808080;
  font-family: abel, sans-serif;
  font-size: 9pt;
  line-height: 1.2;
  list-style: square;
  text-transform: lowercase;
  float: right;
  margin-left: 30px;
}

.legend {
  width: 1000px;
  top: 10px;
  position: relative;
}

</style>


<script>

function init() {

function leftPad(subject, length, padChar ){
  subject = ""+subject;
  while(subject.length < length) subject = padChar + subject;
  return subject;
}

function formatDate(date){
  return leftPad(date.getUTCMonth()+1, 2, "0")+"-"+leftPad(date.getUTCDate(), 2, "0")+"-"+leftPad(date.getUTCHours(), 2, "0");
}

//Precog.cache.disable();
var dateMinus60 = formatDate(new Date(+new Date()-3600000));
var dateMinus30 = formatDate(new Date(+new Date()-1800000));
var dateNow = formatDate(new Date());
var minute = new Date().getMinutes();

var query1 = "data := load(\"//nathan/politicalsentiment/twitter/"+dateMinus30+"/rawtweets\") combined := solve 'stateName, 'state data' := data where data.stateName = 'stateName & data.STATE = 'state {stateName: 'stateName, state: 'state, obamaSentimentScore: sum(data'.score where data'.candidate = \"Obama\") / count(data' where data'.candidate = \"Obama\"), romneySentimentScore: sum(data'.score where data'.candidate = \"Romney\") / count(data' where data'.candidate = \"Romney\")} {stateName: combined.stateName, state: combined.state, sentiment: (50 * (combined.obamaSentimentScore - combined.romneySentimentScore)) + 50}"

var query2 = "data := load(\"//nathan/politicalsentiment/twitter/10-17/rawtweets\") combined := solve 'stateName, 'state data' := data where data.stateName = 'stateName & data.STATE = 'state {stateName: 'stateName, state: 'state, obamaSentimentScore: sum(data'.score where data'.candidate = \"Obama\") / count(data' where data'.candidate = \"Obama\"), romneySentimentScore: sum(data'.score where data'.candidate = \"Romney\") / count(data' where data'.candidate = \"Romney\")} {stateName: combined.stateName, state: combined.state, sentiment: (50 * (combined.obamaSentimentScore - combined.romneySentimentScore)) + 50}" //test of whole day

var query3 ="import std::time::* lastHour := load(\"//nathan/politicalsentiment/twitter/10-23-02/rawtweets\") thisHour:= load(\"//nathan/politicalsentiment/twitter/10-23-03/rawtweets\") thisHour' := thisHour where minuteOfHour(thisHour.timeStamp) < 35 data := thisHour' union lastHour combined := solve 'stateName, 'state data' := data where data.stateName = 'stateName & data.STATE = 'state {stateName: 'stateName, state: 'state, obamaSentimentScore: mean(data'.score where data'.candidate = \"Obama\") , romneySentimentScore: mean(data'.score where data'.candidate = \"Romney\")} {stateName: combined.stateName, state: combined.state, sentiment: (50 * (combined.obamaSentimentScore - combined.romneySentimentScore)) + 50}"

ReportGrid.geo("#chart", {
  axes : ["state", {type:"sentiment", view: [35,65]}],
  load : ReportGrid.query.precog(query3),
  options : {
    ready : function loading(){
      element = document.getElementById('loading-spinner');
      element.parentNode.removeChild(element);
        
    },
    
    label : { 
    },
    map : [{
      template : "usa-states",
      property : "state",
      color : "i:#B30000,#ffffff,#245D99",  
      label : {
        datapointover : function(dp, stats) {
          if(dp.sentiment === 50){
            return JSON.stringify(dp.$data.name)+"\nNeutral State";
          }

          if(dp.sentiment > 50){
            return "<h2 class='democrat'>" + JSON.stringify(dp.$data.name).replace('"','').slice(0,-1)+"</h2><p>Net sentiment for Obama: <h3 class='democrat'>"+JSON.stringify((dp.sentiment).toFixed(2)).replace('"','').slice(0,-1) + "</p></h3>";
          }
            return "<h2 class='republican'>" + JSON.stringify(dp.$data.name).replace('"','').slice(0,-1)+"</h2><p>Net sentiment for Romney: <h3 class='republican'>"+JSON.stringify((100 - dp.sentiment).toFixed(2)).replace('"','').slice(0,-1) + "</p></h3>";
        }
      }
    }]
  }
});


}

</script>
</head>
<body onload="init()">
  <div id="site-holder">
  <div id="header">
  
        </div>
  </div>
  <div id="body"> 
    <h1>tweet sentiment during the presidential debate</h1>
    <div id="loading-spinner"></div>
    <div id="chart" class="chartExample"></div>
    <div class="legend"> 
      <ul>
        <li>
            Source: Data is from Twitter API, captured during the last Presidential Debate
        </li>
      </ul>
    </div>
    <div class="clear-left"> </div>
  </div>
  <div id="footer">
  
  </div>
    </div>
</div>
</body>
</html>
